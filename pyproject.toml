[tool.poetry]
name = "PyBMKG"
version = "2.0.0"
description = "Python BMKG API Wrapper"
authors = ["Kira <kiraware@github.com>"]
packages = [
    { include = "*", from = "src" }
]
license = "MIT"
readme = "README.md"
homepage = "https://github.com/kiraware/PyBMKG"
repository = "https://github.com/kiraware/PyBMKG"
documentation = "https://pybmkg.readthedocs.io/en/latest/"
keywords = ["bmkg", "api"]
classifiers = [
    "Development Status :: 5 - Production/Stable",
    "Environment :: Web Environment",
    "Framework :: AsyncIO",
    "Framework :: aiohttp",
    "Intended Audience :: Developers",
    "Operating System :: OS Independent",
    "Topic :: Scientific/Engineering :: Atmospheric Science",
    "Topic :: Software Development",
]

[tool.poetry.urls]
"Bug Tracker" = "https://github.com/kiraware/PyBMKG/issues"

[tool.poetry.dependencies]
aiohttp = "^3.9.1"
defusedxml = "^0.7.1"
python = "^3.11"

[tool.poetry.group.dev.dependencies]
bandit = "^1.7.6"
mypy = "^1.8.0"
poethepoet = "^0.24.4"
ruff = "^0.2.1"

[tool.poetry.group.test.dependencies]
pytest = "^8.0.0"
pytest-asyncio = "^0.23.3"
pytest-cov = "^4.1.0"

[tool.poetry.group.docs]
optional = true

[tool.poetry.group.docs.dependencies]
mkdocs = "^1.5.3"
mkdocs-material = "^9.5.4"
mkdocstrings = {extras = ["python"], version = "^0.24.0"}

[build-system]
requires = ["poetry-core>=1.0.0"]
build-backend = "poetry.core.masonry.api"
backend-path = ["src"]

[tool.poe.tasks]
bandit = "bandit -c pyproject.toml -r ."
mypy = "mypy"
ruff = "ruff --fix"
lint = ["bandit", "mypy", "ruff"]
format = "ruff format"
test = "pytest --cov=src --cov-report=html"

[tool.bandit]
targets = ["src", "tests"]
exclude_dirs = ["venv"]

[tool.bandit.assert_used]
skips = ["*_test.py", "*test_*.py"]

[tool.mypy]
files = ["src", "tests"]
strict_optional = false

[tool.ruff]
exclude = [
    ".venv",
    ".git",
    "__pycache__",
    "build",
    "dist",
    "venv",
]
line-length = 88
target-version = "py311"
select = [
    "E",
    "F",
    "W",
    "I",
]
ignore = []
src = ["src", "tests"]

[tool.ruff.format]
docstring-code-format = true

[tool.pytest.ini_options]
addopts = [
    "-vvv",
    "--doctest-modules",
    "--import-mode=importlib",
]
pythonpath = [
    ".",
    "src",
]
testpaths = ["tests", "src"]
asyncio_mode = "auto"
